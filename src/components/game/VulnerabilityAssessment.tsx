
import React, { useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  AlertTriangle,
  Shield,
  CheckCircle2,
  X,
  ChevronRight,
  BarChart3,
  Download
} from 'lucide-react';
import { Progress } from "@/components/ui/progress";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";

interface VulnerabilityAssessmentProps {
  onComplete: () => void;
}

// Expanded and more complex questions
const questions = [
  {
    id: 1,
    text: "A colleague suggests bypassing procurement protocols for a time-sensitive project. How would you respond?",
    options: [
      { value: "1", label: "Refuse and report the suggestion immediately" },
      { value: "2", label: "Decline but keep the matter private" },
      { value: "3", label: "Request more information before deciding" },
      { value: "4", label: "Agree if the situation seems justified" },
      { value: "5", label: "Enthusiastically support the idea" }
    ]
  },
  {
    id: 2,
    text: "You discover a senior official accepting gifts from contractors. What action would you take?",
    options: [
      { value: "1", label: "Anonymous reporting through official channels" },
      { value: "2", label: "Direct confrontation with the official" },
      { value: "3", label: "Discreet discussion with the official's supervisor" },
      { value: "4", label: "Careful observation but no immediate action" },
      { value: "5", label: "Nothing - it's not your responsibility" }
    ]
  },
  {
    id: 3,
    text: "You're offered an all-expenses-paid 'educational trip' by a vendor seeking contracts. Your response would be:",
    options: [
      { value: "1", label: "Decline and report the offer" },
      { value: "2", label: "Decline politely without reporting" },
      { value: "3", label: "Accept but pay your own expenses" },
      { value: "4", label: "Accept if others are also attending" },
      { value: "5", label: "Accept enthusiastically" }
    ]
  },
  {
    id: 4,
    text: "You notice budget discrepancies that suggest misuse of funds. Would you:",
    options: [
      { value: "1", label: "Immediately report to appropriate authorities" },
      { value: "2", label: "Investigate personally before reporting" },
      { value: "3", label: "Discuss with colleagues to validate concerns" },
      { value: "4", label: "Report only if the amount seems significant" },
      { value: "5", label: "Ignore - accounting errors are common" }
    ]
  },
  {
    id: 5,
    text: "A policy you're implementing has unintended negative effects on vulnerable communities. Would you:",
    options: [
      { value: "1", label: "Halt implementation and seek revision" },
      { value: "2", label: "Continue but advocate for amendments" },
      { value: "3", label: "Add compensatory measures while continuing" },
      { value: "4", label: "Continue - policy changes always have tradeoffs" },
      { value: "5", label: "Continue - vulnerable groups must adapt" }
    ]
  },
  {
    id: 6,
    text: "You have access to confidential information that could benefit your personal investments. How would you handle this?",
    options: [
      { value: "1", label: "Avoid any investments related to your work" },
      { value: "2", label: "Establish a blind trust for investments" },
      { value: "3", label: "Make small investments that won't attract attention" },
      { value: "4", label: "Use the information but through intermediaries" },
      { value: "5", label: "Actively use this advantage - it's a perk of the position" }
    ]
  },
  {
    id: 7,
    text: "You witness colleagues using public resources for personal purposes. Your response would be:",
    options: [
      { value: "1", label: "Report immediately through official channels" },
      { value: "2", label: "Confront them directly about the misuse" },
      { value: "3", label: "Report only if the behavior continues" },
      { value: "4", label: "Ignore if the resources used are minimal" },
      { value: "5", label: "Join in - everyone does it occasionally" }
    ]
  },
  {
    id: 8,
    text: "A decision you're involved in could significantly benefit your neighborhood. Would you:",
    options: [
      { value: "1", label: "Recuse yourself from the decision process" },
      { value: "2", label: "Disclose the conflict but participate fairly" },
      { value: "3", label: "Participate but with minimal influence" },
      { value: "4", label: "Use your position to ensure neighborhood benefits" },
      { value: "5", label: "Actively maximize benefits for your area" }
    ]
  }
];

const VulnerabilityAssessment: React.FC<VulnerabilityAssessmentProps> = ({ onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [showResults, setShowResults] = useState(false);
  
  const handleAnswer = (value: string) => {
    setAnswers(prev => ({
      ...prev,
      [questions[currentQuestion].id]: value
    }));
  };
  
  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
    } else {
      setShowResults(true);
    }
  };
  
  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1);
    }
  };
  
  const calculateResults = () => {
    // More sophisticated algorithm for integrity assessment
    let integrityScore = 0;
    let blindSpotScore = 0;
    let consistencyScore = 0;
    
    // Calculate raw integrity score (higher values in questions 1-8 indicate lower integrity)
    const q1Score = answers[1] ? 6 - parseInt(answers[1]) : 3; // Reverse scoring
    const q2Score = answers[2] ? 6 - parseInt(answers[2]) : 3;
    const q3Score = answers[3] ? 6 - parseInt(answers[3]) : 3;
    const q4Score = answers[4] ? 6 - parseInt(answers[4]) : 3;
    const q5Score = answers[5] ? 6 - parseInt(answers[5]) : 3;
    const q6Score = answers[6] ? 6 - parseInt(answers[6]) : 3;
    const q7Score = answers[7] ? 6 - parseInt(answers[7]) : 3;
    const q8Score = answers[8] ? 6 - parseInt(answers[8]) : 3;
    
    // Calculate raw integrity (0-100)
    integrityScore = Math.round(((q1Score + q2Score + q3Score + q4Score + q5Score + q6Score + q7Score + q8Score) / 40) * 100);
    
    // Calculate consistency score
    // Check for inconsistent answers across similar ethical domains
    // If someone scores high on transparency but low on reporting, that's inconsistent
    if (Math.abs(q1Score - q7Score) > 2) consistencyScore -= 15;
    if (Math.abs(q2Score - q4Score) > 2) consistencyScore -= 15;
    if (Math.abs(q3Score - q6Score) > 2) consistencyScore -= 15;
    if (Math.abs(q5Score - q8Score) > 2) consistencyScore -= 15;
    
    // Calculate blind spots
    // Blind spots are high integrity overall but specific weaknesses
    if (integrityScore > 70) {
      const scores = [q1Score, q2Score, q3Score, q4Score, q5Score, q6Score, q7Score, q8Score];
      const minScore = Math.min(...scores);
      
      if (minScore < 3) {
        blindSpotScore = 30 + (3 - minScore) * 10;
      }
    }
    
    // Adjust integrity score based on consistency
    integrityScore = Math.max(0, Math.min(100, integrityScore + consistencyScore));
    
    return {
      integrityScore,
      blindSpotScore,
      areas: {
        personalBenefit: Math.max(0, 100 - ((q3Score + q6Score) * 10)),
        ruleFollowing: Math.min(100, (q1Score + q7Score) * 7),
        reportingComfort: Math.min(100, (q2Score + q4Score) * 7),
        conflictManagement: Math.min(100, (q5Score + q8Score) * 7)
      }
    };
  };
  
  const results = calculateResults();
  
  return (
    <Card className="mb-6">
      <CardContent className="p-4">
        {!showResults ? (
          <>
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Shield className="h-5 w-5 text-corruption-primary" />
              <span>Personal Integrity Assessment</span>
            </h2>
            
            <div className="mb-4">
              <Progress value={(currentQuestion / questions.length) * 100} className="h-2" />
              <div className="flex justify-between mt-1 text-xs text-muted-foreground">
                <span>Question {currentQuestion + 1} of {questions.length}</span>
                <span>{Math.round((currentQuestion / questions.length) * 100)}% complete</span>
              </div>
            </div>
            
            <div className="mb-6">
              <h3 className="text-md font-medium mb-3">{questions[currentQuestion].text}</h3>
              
              <RadioGroup 
                value={answers[questions[currentQuestion].id] || ""} 
                onValueChange={handleAnswer}
                className="space-y-2"
              >
                {questions[currentQuestion].options.map((option) => (
                  <div key={option.value} className="flex items-center space-x-2">
                    <RadioGroupItem value={option.value} id={`option-${option.value}`} />
                    <Label htmlFor={`option-${option.value}`}>{option.label}</Label>
                  </div>
                ))}
              </RadioGroup>
            </div>
            
            <div className="flex justify-between">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
              >
                Previous
              </Button>
              
              <Button
                onClick={handleNext}
                disabled={!answers[questions[currentQuestion].id]}
                className="gap-1"
              >
                {currentQuestion < questions.length - 1 ? (
                  <>
                    <span>Next</span>
                    <ChevronRight className="h-4 w-4" />
                  </>
                ) : (
                  <>
                    <span>See Results</span>
                    <BarChart3 className="h-4 w-4" />
                  </>
                )}
              </Button>
            </div>
          </>
        ) : (
          <>
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Shield className="h-5 w-5 text-corruption-primary" />
              <span>Your Integrity Profile</span>
            </h2>
            
            <div className="space-y-4 mb-4">
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Overall Integrity Score</span>
                  <span className="text-sm font-medium">{results.integrityScore}%</span>
                </div>
                <Progress value={results.integrityScore} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Personal Benefit Vulnerability</span>
                  <span className="text-sm font-medium">{results.areas.personalBenefit}%</span>
                </div>
                <Progress value={results.areas.personalBenefit} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Rule Following Score</span>
                  <span className="text-sm font-medium">{results.areas.ruleFollowing}%</span>
                </div>
                <Progress value={results.areas.ruleFollowing} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Reporting Comfort</span>
                  <span className="text-sm font-medium">{results.areas.reportingComfort}%</span>
                </div>
                <Progress value={results.areas.reportingComfort} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Conflict Management</span>
                  <span className="text-sm font-medium">{results.areas.conflictManagement}%</span>
                </div>
                <Progress value={results.areas.conflictManagement} className="h-2" />
              </div>
            </div>
            
            <div className="p-3 rounded-md bg-muted mb-4">
              <h3 className="text-sm font-medium flex items-center gap-2 mb-2">
                <AlertTriangle className="h-4 w-4 text-yellow-500" />
                <span>Your Integrity Blind Spots</span>
              </h3>
              
              {results.blindSpotScore > 20 ? (
                <p className="text-sm text-muted-foreground">
                  Your responses reveal significant blind spots in your ethical framework. While you maintain strong principles in some areas, you show vulnerability in others that could compromise your overall integrity.
                </p>
              ) : results.blindSpotScore > 0 ? (
                <p className="text-sm text-muted-foreground">
                  Your responses suggest potential blind spots in how you approach ethical dilemmas. Consider how your principles may be inconsistently applied across different contexts.
                </p>
              ) : (
                <p className="text-sm text-muted-foreground">
                  Your responses show good consistency between your ethical principles and practical judgments. Continue to maintain this alignment in challenging situations.
                </p>
              )}
            </div>
            
            <div className="flex justify-between">
              <Button
                variant="outline"
                onClick={() => {
                  setCurrentQuestion(0);
                  setShowResults(false);
                }}
                className="gap-1"
              >
                <X className="h-4 w-4" />
                <span>Retake</span>
              </Button>
              
              <Button
                onClick={onComplete}
                className="gap-1"
              >
                <Download className="h-4 w-4" />
                <span>Download Personal Integrity Plan</span>
              </Button>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityAssessment;
