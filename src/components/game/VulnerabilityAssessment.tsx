
import React, { useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  AlertTriangle,
  Shield,
  CheckCircle2,
  X,
  ChevronRight,
  BarChart3,
  Download
} from 'lucide-react';
import { Progress } from "@/components/ui/progress";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";

interface VulnerabilityAssessmentProps {
  onComplete: () => void;
}

const questions = [
  {
    id: 1,
    text: "If a colleague offers to share confidential information that could benefit you personally, how likely are you to accept?",
    options: [
      { value: "1", label: "Very unlikely" },
      { value: "2", label: "Somewhat unlikely" },
      { value: "3", label: "Neutral" },
      { value: "4", label: "Somewhat likely" },
      { value: "5", label: "Very likely" }
    ]
  },
  {
    id: 2,
    text: "How comfortable would you feel reporting unethical behavior by a superior?",
    options: [
      { value: "1", label: "Very uncomfortable" },
      { value: "2", label: "Somewhat uncomfortable" },
      { value: "3", label: "Neutral" },
      { value: "4", label: "Somewhat comfortable" },
      { value: "5", label: "Very comfortable" }
    ]
  },
  {
    id: 3,
    text: "How acceptable is it to bend rules when no one is directly harmed?",
    options: [
      { value: "1", label: "Completely unacceptable" },
      { value: "2", label: "Mostly unacceptable" },
      { value: "3", label: "Depends on the situation" },
      { value: "4", label: "Somewhat acceptable" },
      { value: "5", label: "Completely acceptable" }
    ]
  },
  {
    id: 4,
    text: "Would you accept a small gift from someone whose work you're evaluating?",
    options: [
      { value: "1", label: "Definitely not" },
      { value: "2", label: "Probably not" },
      { value: "3", label: "Not sure" },
      { value: "4", label: "Probably yes" },
      { value: "5", label: "Definitely yes" }
    ]
  },
  {
    id: 5,
    text: "How important is it to follow proper procedures even when they slow down urgent work?",
    options: [
      { value: "1", label: "Not important" },
      { value: "2", label: "Slightly important" },
      { value: "3", label: "Moderately important" },
      { value: "4", label: "Very important" },
      { value: "5", label: "Extremely important" }
    ]
  }
];

const VulnerabilityAssessment: React.FC<VulnerabilityAssessmentProps> = ({ onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [showResults, setShowResults] = useState(false);
  
  const handleAnswer = (value: string) => {
    setAnswers(prev => ({
      ...prev,
      [questions[currentQuestion].id]: value
    }));
  };
  
  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
    } else {
      setShowResults(true);
    }
  };
  
  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1);
    }
  };
  
  const calculateResults = () => {
    // This is a simplified algorithm
    // In a real implementation, the calculation would be more sophisticated
    let integrityScore = 0;
    let blindSpotScore = 0;
    
    // Questions 1, 3, 4 are scored differently than 2, 5
    const q1Score = answers[1] ? 6 - parseInt(answers[1]) : 3; // Reverse (lower is better)
    const q2Score = answers[2] ? parseInt(answers[2]) : 3; // Higher is better
    const q3Score = answers[3] ? 6 - parseInt(answers[3]) : 3; // Reverse
    const q4Score = answers[4] ? 6 - parseInt(answers[4]) : 3; // Reverse
    const q5Score = answers[5] ? parseInt(answers[5]) : 3; // Higher is better
    
    integrityScore = Math.round(((q1Score + q2Score + q3Score + q4Score + q5Score) / 25) * 100);
    
    // Blind spots are areas where someone scored high on integrity but had inconsistent answers
    if (integrityScore > 60 && (q1Score > 3 && q3Score < 3)) {
      blindSpotScore += 25;
    }
    if (integrityScore > 60 && (q2Score < 3 && q5Score > 3)) {
      blindSpotScore += 25;
    }
    
    return {
      integrityScore,
      blindSpotScore,
      areas: {
        personalBenefit: 100 - (q1Score + q4Score) * 10,
        ruleFollowing: (q3Score + q5Score) * 10,
        reportingComfort: q2Score * 20
      }
    };
  };
  
  const results = calculateResults();
  
  return (
    <Card className="mb-6">
      <CardContent className="p-4">
        {!showResults ? (
          <>
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Shield className="h-5 w-5 text-corruption-primary" />
              <span>Personal Integrity Assessment</span>
            </h2>
            
            <div className="mb-4">
              <Progress value={(currentQuestion / questions.length) * 100} className="h-2" />
              <div className="flex justify-between mt-1 text-xs text-muted-foreground">
                <span>Question {currentQuestion + 1} of {questions.length}</span>
                <span>{Math.round((currentQuestion / questions.length) * 100)}% complete</span>
              </div>
            </div>
            
            <div className="mb-6">
              <h3 className="text-md font-medium mb-3">{questions[currentQuestion].text}</h3>
              
              <RadioGroup 
                value={answers[questions[currentQuestion].id] || ""} 
                onValueChange={handleAnswer}
                className="space-y-2"
              >
                {questions[currentQuestion].options.map((option) => (
                  <div key={option.value} className="flex items-center space-x-2">
                    <RadioGroupItem value={option.value} id={`option-${option.value}`} />
                    <Label htmlFor={`option-${option.value}`}>{option.label}</Label>
                  </div>
                ))}
              </RadioGroup>
            </div>
            
            <div className="flex justify-between">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
              >
                Previous
              </Button>
              
              <Button
                onClick={handleNext}
                disabled={!answers[questions[currentQuestion].id]}
                className="gap-1"
              >
                {currentQuestion < questions.length - 1 ? (
                  <>
                    <span>Next</span>
                    <ChevronRight className="h-4 w-4" />
                  </>
                ) : (
                  <>
                    <span>See Results</span>
                    <BarChart3 className="h-4 w-4" />
                  </>
                )}
              </Button>
            </div>
          </>
        ) : (
          <>
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Shield className="h-5 w-5 text-corruption-primary" />
              <span>Your Integrity Profile</span>
            </h2>
            
            <div className="space-y-4 mb-4">
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Overall Integrity Score</span>
                  <span className="text-sm font-medium">{results.integrityScore}%</span>
                </div>
                <Progress value={results.integrityScore} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Personal Benefit Vulnerability</span>
                  <span className="text-sm font-medium">{results.areas.personalBenefit}%</span>
                </div>
                <Progress value={results.areas.personalBenefit} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Rule Following Score</span>
                  <span className="text-sm font-medium">{results.areas.ruleFollowing}%</span>
                </div>
                <Progress value={results.areas.ruleFollowing} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm font-medium">Reporting Comfort</span>
                  <span className="text-sm font-medium">{results.areas.reportingComfort}%</span>
                </div>
                <Progress value={results.areas.reportingComfort} className="h-2" />
              </div>
            </div>
            
            <div className="p-3 rounded-md bg-muted mb-4">
              <h3 className="text-sm font-medium flex items-center gap-2 mb-2">
                <AlertTriangle className="h-4 w-4 text-yellow-500" />
                <span>Your Integrity Blind Spots</span>
              </h3>
              
              {results.blindSpotScore > 0 ? (
                <p className="text-sm text-muted-foreground">
                  Your responses suggest potential blind spots in how you view rule-following versus personal benefit. You may sometimes justify exceptions to rules while maintaining a strong ethical self-image.
                </p>
              ) : (
                <p className="text-sm text-muted-foreground">
                  Your responses show good consistency between your ethical principles and practical judgments. Continue to maintain this alignment in challenging situations.
                </p>
              )}
            </div>
            
            <div className="flex justify-between">
              <Button
                variant="outline"
                onClick={() => {
                  setCurrentQuestion(0);
                  setShowResults(false);
                }}
                className="gap-1"
              >
                <X className="h-4 w-4" />
                <span>Retake</span>
              </Button>
              
              <Button
                onClick={onComplete}
                className="gap-1"
              >
                <Download className="h-4 w-4" />
                <span>Download Personal Integrity Plan</span>
              </Button>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityAssessment;
